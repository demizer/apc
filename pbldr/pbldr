#!/usr/bin/env python
# encoding: utf-8
'''
pbldr -- An arch linux packaging tool.

Copyright (c) 2013, Jesus Alvarez <jeezusjr@gmail.com>
License: MIT (See LICENSE for details)
'''

import sys
import argparse

from pbldr import app
from pbldr import logger
from pbldr.logger import log, log_note

logr = logger.getLogger(logger.NAME)

aname = logger.colorize('pbldr -- Magically build and add packages to an Arch '
                        'Linux package repository.', 'yellow', 'bgcyan',
                        'bold')

intro = '\n' + aname

usage = intro + '''

Usage: pbldr [OPTIONS]

Commands:

build   Build the selected packages and sources. ALL packages by default.

source  Build the source of the package. This does not need to be specified if
        using the 'build' command.

repo    Add selected packages to the projects repositories.

Optional arguments for all commands:
-h, --help          Show this help message and exit.
-l, --log-level     Change the logging level. Possible values are DEBUG, INFO,
                    WARNING, ERROR, CRITICAL
-p PKG, --pkgs PKG  Select packages to use.

Optional arguments for the 'build' command:
-r, --root          Select chroot root path. Example "/opt/chroot".
-c, --copy          Select chroot copy name. Example "anet".
-s, --sloppy        Do not clean the chroot before building a package.
-n, --no-check      Do not perform signature checks.
-u, --update-sums   Update source hashes in package PKGBUILDs.
-x, --no-update     Do not update the chroots when building packages.

Optional arguments for the 'source' command:
NONE

Optional arguments for the 'repo' command:
-t, --target        Select a repo to add packages to.
-n, --no-delete     Do not delete packages in the stage.
'''

# Parse the arguments!
parser = argparse.ArgumentParser(add_help=False)
parser.add_argument('-h', '--help', action='store_true')
parser.add_argument('-l', '--log-level', action='store')
parser.add_argument('-p', '--pkgs', action='append')
subparser = parser.add_subparsers(dest='subparser_name')

build_parser = subparser.add_parser('build')
build_parser.add_argument('-r', '--root', action='store')
build_parser.add_argument('-c', '--copy', action='store')
build_parser.add_argument('-s', '--sloppy', action='store_true')
build_parser.add_argument('-n', '--no-check', action='store_true')
build_parser.add_argument('-u', '--update-sums', action='store_true')
build_parser.add_argument('-x', '--no-update', action='store_true')

subparser.add_parser('source')

repo_parser = subparser.add_parser('repo')
repo_parser.add_argument('-t', '--target', action='store')
repo_parser.add_argument('-n', '--no-delete', action='store_true')

args = parser.parse_args()

if len(sys.argv) == 1 or args.help:
    print(usage)
    sys.exit(1)

logger.init_logging('WARNING')
log_note('Welcome!', 'pbldr', 'white', 'bgred')

vlevel = ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')
if args.log_level and not args.log_level in vlevel:
    logr.critical('Log level must be one of DEBUG, INFO, WARNING, ERROR, '
                  'or CRITICAL!')
    sys.exit(1)

if __name__ == '__main__':
    try:
        app.App(args)
        log('All done')
    except (KeyboardInterrupt, EOFError):
        log('\nToodles')
